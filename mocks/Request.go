// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Request is an autogenerated mock type for the Request type
type Request struct {
	mock.Mock
}

type Request_Expecter struct {
	mock *mock.Mock
}

func (_m *Request) EXPECT() *Request_Expecter {
	return &Request_Expecter{mock: &_m.Mock}
}

// KeepAlive provides a mock function with given fields: url
func (_m *Request) KeepAlive(url string) bool {
	ret := _m.Called(url)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Request_KeepAlive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeepAlive'
type Request_KeepAlive_Call struct {
	*mock.Call
}

// KeepAlive is a helper method to define mock.On call
//   - url string
func (_e *Request_Expecter) KeepAlive(url interface{}) *Request_KeepAlive_Call {
	return &Request_KeepAlive_Call{Call: _e.mock.On("KeepAlive", url)}
}

func (_c *Request_KeepAlive_Call) Run(run func(url string)) *Request_KeepAlive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Request_KeepAlive_Call) Return(_a0 bool) *Request_KeepAlive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Request_KeepAlive_Call) RunAndReturn(run func(string) bool) *Request_KeepAlive_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequest creates a new instance of Request. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *Request {
	mock := &Request{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
